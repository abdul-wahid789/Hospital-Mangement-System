/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Parvez
 */
public class RecpPanelAppointment extends javax.swing.JFrame {

    int n = 0;
    String search;

    /**
     * Creates new form AdminHomePage
     */
    public RecpPanelAppointment() {
        initComponents();
        set();

    }

    public void set() {

        List<Receptionist> list = new ArrayList<Receptionist>();
        NumberRead num = new NumberRead();
        n = num.read();

        FileRead fw = new FileRead();
        list = fw.fileReadReceptionist();
        name.setText(list.get(n).getName());

        List<Patient> plist = new ArrayList<Patient>();
        List<Appointment> alist = new ArrayList<Appointment>();
        List<Appointment> alistFinal = new ArrayList<Appointment>();
        FileRead fr = new FileRead();

        plist = fr.fileReadPatient();
        alist = fr.fileReadAppointment();
        alistFinal = fr.fileReadAppointmentFinal();
        int d = 0, p = 0, a = 0;
        SimpleDateFormat f = new SimpleDateFormat("dd-MM-yyyy");
        DefaultTableModel model = (DefaultTableModel) jappoint.getModel();
        Object rowData[] = new Object[6];
        for (Appointment pp : alist) {
            rowData[0] = pp.getpName();
            rowData[1] = pp.getdName();
            rowData[2] = pp.strDate();
            rowData[3] = pp.getTime();
            for (Patient ps : plist) {
                if ((ps.getName()).equalsIgnoreCase(pp.getpName())) {
                    rowData[4] = ps.getPatientType();
                }
            }
            for (Appointment alf : alistFinal) {
                if (f.format(alf.getAppDate()).equals(f.format(pp.getAppDate()))
                        && pp.getTime().equals(alf.getTime())
                        && (pp.getpName()).equalsIgnoreCase(pp.getpName())
                        && (pp.getdName()).equalsIgnoreCase(pp.getdName())) {

                    rowData[5] = "NO";
                } else {
                    rowData[5] = "YES";
                }
            }
            model.addRow(rowData);
        }

    }

    public void setDoctor() {
        DefaultTableModel model = (DefaultTableModel) jComfirmed.getModel();
        List<Appointment> alistFinal = new ArrayList<Appointment>();
        FileRead fr = new FileRead();

        alistFinal = fr.fileReadAppointmentFinal();
        Object rowData[] = new Object[3];
        for (Appointment pp : alistFinal) {
            rowData[0] = pp.getpName();
            rowData[1] = pp.getdName();
            rowData[2] = pp.strDate();
            rowData[3] = pp.getTime();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jappoint = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        froward = new javax.swing.JButton();
        reschedule = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        add4 = new javax.swing.JLabel();
        update3 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        update4 = new javax.swing.JLabel();
        update5 = new javax.swing.JLabel();
        update6 = new javax.swing.JLabel();
        update7 = new javax.swing.JLabel();
        update8 = new javax.swing.JLabel();
        jDate = new com.toedter.calendar.JDateChooser();
        jTime = new javax.swing.JComboBox<>();
        cancel1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jComfirmed = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jFullName = new javax.swing.JTextField();
        jSearchButtton = new javax.swing.JButton();
        cancel2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hospital Management System");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(24, 44, 97));

        jLabel1.setBackground(new java.awt.Color(0, 204, 204));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/hms60.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Hospital Management System");

        name.setEditable(false);
        name.setBackground(new java.awt.Color(24, 44, 97));
        name.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        name.setForeground(new java.awt.Color(255, 255, 255));
        name.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        name.setText("Abdul Wahid");
        name.setBorder(null);
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(232, 65, 24));
        jLabel7.setText("(Logout)");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jappoint.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient name", "Doctor name", "Date", "Time", "Patient Type", "Available"
            }
        ));
        jScrollPane1.setViewportView(jappoint);

        jLabel4.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(24, 44, 97));
        jLabel4.setText("Select an Appointment");

        froward.setBackground(new java.awt.Color(68, 189, 50));
        froward.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        froward.setForeground(new java.awt.Color(255, 255, 255));
        froward.setText("Confirm appointment");
        froward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frowardActionPerformed(evt);
            }
        });

        reschedule.setBackground(new java.awt.Color(24, 44, 97));
        reschedule.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        reschedule.setForeground(new java.awt.Color(255, 255, 255));
        reschedule.setText("Reschedule");
        reschedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescheduleActionPerformed(evt);
            }
        });

        jPanel12.setBackground(new java.awt.Color(24, 44, 97));

        add4.setBackground(new java.awt.Color(0, 204, 204));
        add4.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        add4.setForeground(new java.awt.Color(255, 255, 255));
        add4.setText("Appointments");
        add4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add4addMouseClicked(evt);
            }
        });

        update3.setBackground(new java.awt.Color(0, 204, 204));
        update3.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        update3.setForeground(new java.awt.Color(255, 255, 255));
        update3.setText("Edit Profile");
        update3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update3updateMouseClicked(evt);
            }
        });

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        update4.setBackground(new java.awt.Color(0, 204, 204));
        update4.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        update4.setForeground(new java.awt.Color(255, 255, 255));
        update4.setText("Add Patient");
        update4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update4updateMouseClicked(evt);
            }
        });

        update5.setBackground(new java.awt.Color(0, 204, 204));
        update5.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        update5.setForeground(new java.awt.Color(255, 255, 255));
        update5.setText("Update Patient");
        update5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update5updateMouseClicked(evt);
            }
        });

        update6.setBackground(new java.awt.Color(0, 204, 204));
        update6.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        update6.setForeground(new java.awt.Color(255, 255, 255));
        update6.setText("Remove Patient");
        update6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update6updateMouseClicked(evt);
            }
        });

        update7.setBackground(new java.awt.Color(0, 204, 204));
        update7.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        update7.setForeground(new java.awt.Color(255, 255, 255));
        update7.setText("Patients list");
        update7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update7updateMouseClicked(evt);
            }
        });

        update8.setBackground(new java.awt.Color(0, 204, 204));
        update8.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        update8.setForeground(new java.awt.Color(255, 255, 255));
        update8.setText("Search Patient");
        update8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update8updateMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(update4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(update7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(update6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(update3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(add4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(update5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(update8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(add4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(update4)
                .addGap(35, 35, 35)
                .addComponent(update6)
                .addGap(28, 28, 28)
                .addComponent(update8)
                .addGap(34, 34, 34)
                .addComponent(update5)
                .addGap(31, 31, 31)
                .addComponent(update7)
                .addGap(33, 33, 33)
                .addComponent(update3)
                .addContainerGap(165, Short.MAX_VALUE))
        );

        jDate.setDateFormatString("d MMM , yyyy");
        jDate.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N

        jTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "10:00 AM-11:00 AM", "11:30 AM-12:30 PM", "04:00 PM-05:00 PM", "05:30 PM-06:30 PM", "08:00 PM-09:00 PM" }));

        cancel1.setBackground(new java.awt.Color(237, 76, 103));
        cancel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        cancel1.setForeground(new java.awt.Color(255, 255, 255));
        cancel1.setText("Cancel appointment");
        cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel1ActionPerformed(evt);
            }
        });

        jComfirmed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient name", "Date", "Time"
            }
        ));
        jScrollPane2.setViewportView(jComfirmed);

        jLabel5.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(24, 44, 97));
        jLabel5.setText("Enter doctor's name To view confirmed appointments");

        jLabel8.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(24, 44, 97));
        jLabel8.setText("Confirmed appointments");

        jFullName.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFullNameActionPerformed(evt);
            }
        });

        jSearchButtton.setBackground(new java.awt.Color(6, 82, 221));
        jSearchButtton.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jSearchButtton.setForeground(new java.awt.Color(255, 255, 255));
        jSearchButtton.setText("Search");
        jSearchButtton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchButttonActionPerformed(evt);
            }
        });

        cancel2.setBackground(new java.awt.Color(237, 76, 103));
        cancel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        cancel2.setForeground(new java.awt.Color(255, 255, 255));
        cancel2.setText("Delete confirmed Appointments");
        cancel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(36, 36, 36)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(froward, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDate, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(reschedule, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(75, 75, 75)
                                        .addComponent(jTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(132, 132, 132)
                                                .addComponent(jFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jSearchButtton))
                                            .addComponent(jLabel5)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(46, 46, 46))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(82, 82, 82)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancel2)
                                        .addGap(35, 35, 35))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jLabel4)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(jScrollPane1))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addComponent(froward, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)
                                        .addComponent(cancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(83, 83, 83)
                                        .addComponent(jDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(reschedule, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSearchButtton)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(82, 82, 82)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancel2)
                                .addGap(82, 82, 82)))
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void frowardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frowardActionPerformed
        String pname;
        String dname;
        String time;
        String available;
        Date date = null;

        int i = jappoint.getSelectedRow();
        if (i == -1) {
            JOptionPane.showMessageDialog(null, "Select a Appointment",
                    "ERROR", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) jappoint.getModel();

            pname = model.getValueAt(i, 0).toString();
            dname = model.getValueAt(i, 1).toString();
            time = model.getValueAt(i, 3).toString();
            available = model.getValueAt(i, 5).toString();
            try {
                date = new SimpleDateFormat("dd-MM-yyyy").parse((String) model.getValueAt(i, 2));
            } catch (ParseException ex) {
                Logger.getLogger(RecpPanelAppointment.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (available.equalsIgnoreCase("no")) {
                JOptionPane.showMessageDialog(null, "Not Possible try to Reschedule",
                        "ERROR", JOptionPane.WARNING_MESSAGE);
            } else {
                Appointment ap = new Appointment(pname, dname, date, time);
                FileWrite fw = new FileWrite();
                fw.fileWriteAppointmentFinal(ap);
                JOptionPane.showMessageDialog(null, "Successfully");
                model.removeRow(i);

                FileRead fr = new FileRead();
                List<Appointment> newList = new ArrayList<Appointment>();
                newList = fr.fileReadAppointment();
                int ii = -1;
                for (Appointment a : newList) {
                    ii++;
                    if (pname.equalsIgnoreCase(a.getpName())) {
                        break;
                    }
                }
                newList.remove(ii);
                FileRemove fu = new FileRemove();
                fu.fileRemoveAppointment(newList);
                RecpPanelAppointment main = new RecpPanelAppointment();
                main.setVisible(true);
                this.dispose();

            }
        }
    }//GEN-LAST:event_frowardActionPerformed

    private void rescheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescheduleActionPerformed
        String time = jTime.getSelectedItem().toString();
        Date date = jDate.getDate();
        String pname;
        String dname;

        if (time.equalsIgnoreCase("select") || date == null) {
            JOptionPane.showMessageDialog(null, "Select Date and Time",
                    "ERROR", JOptionPane.WARNING_MESSAGE);
        } else {

            int i = jappoint.getSelectedRow();
            if (i == -1) {
                JOptionPane.showMessageDialog(null, "Select a Appointment",
                        "ERROR", JOptionPane.WARNING_MESSAGE);
            } else {
                DefaultTableModel model = (DefaultTableModel) jappoint.getModel();

                pname = model.getValueAt(i, 0).toString();
                dname = model.getValueAt(i, 1).toString();

                FileRead fr = new FileRead();
                List<Appointment> alistFinal = new ArrayList<Appointment>();
                alistFinal = fr.fileReadAppointmentFinal();
                SimpleDateFormat f = new SimpleDateFormat("dd-MM-yyyy");
                int find = 0;
                for (Appointment alf : alistFinal) {
                    if (pname.equalsIgnoreCase(alf.getpName())
                            && dname.equalsIgnoreCase(alf.getdName())
                            && f.format(date).equals(f.format(alf.getAppDate()))
                            && time.equalsIgnoreCase(alf.getTime())) {

                        find++;
                    }
                }
                if (find != 0) {
                    JOptionPane.showMessageDialog(null, "Select Another Date or Time",
                            "ERROR", JOptionPane.WARNING_MESSAGE);
                } else {
                    Appointment ap = new Appointment(pname, dname, date, time);
                    FileWrite fw = new FileWrite();
                    fw.fileWriteAppointmentFinal(ap);
                    JOptionPane.showMessageDialog(null, "Successfully");
                    model.removeRow(i);

                    List<Appointment> newList = new ArrayList<Appointment>();
                    newList = fr.fileReadAppointment();
                    int ii = -1;
                    for (Appointment a : newList) {
                        ii++;
                        if (pname.equalsIgnoreCase(a.getpName())) {
                            break;
                        }
                    }
                    newList.remove(ii);
                    FileRemove fu = new FileRemove();
                    fu.fileRemoveAppointment(newList);
                    RecpPanelAppointment main = new RecpPanelAppointment();
                    main.setVisible(true);
                    this.dispose();
                }
            }
        }

    }//GEN-LAST:event_rescheduleActionPerformed

    private void add4addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add4addMouseClicked
        PharPanelPrescription pa = new PharPanelPrescription();
        pa.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_add4addMouseClicked

    private void update3updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update3updateMouseClicked
        RecpPanelEdit rpe = new RecpPanelEdit();
        rpe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_update3updateMouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        LoginAsFrame lia = new LoginAsFrame();
        lia.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void update4updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update4updateMouseClicked
        RecpPatientPanelAdd rppa = new RecpPatientPanelAdd();
        rppa.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_update4updateMouseClicked

    private void update5updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update5updateMouseClicked
        RecpPatientPanelSearch rpps = new RecpPatientPanelSearch();
        rpps.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_update5updateMouseClicked

    private void update6updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update6updateMouseClicked
        RecpPatientPanelRemove rppr = new RecpPatientPanelRemove();
        rppr.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_update6updateMouseClicked

    private void update7updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update7updateMouseClicked
        RecpPatientPanelList rppl = new RecpPatientPanelList();
        rppl.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_update7updateMouseClicked

    private void update8updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update8updateMouseClicked
        RecpPatientPanelSearch rpps = new RecpPatientPanelSearch();
        rpps.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_update8updateMouseClicked

    private void cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel1ActionPerformed
        String pname;
        String dname;
        Date date = null;
        String time;

        int i = jappoint.getSelectedRow();

        if (i == -1) {
            JOptionPane.showMessageDialog(null, "Select a Appointment",
                    "ERROR", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) jappoint.getModel();

            pname = model.getValueAt(i, 0).toString();
            dname = model.getValueAt(i, 1).toString();
            time = model.getValueAt(i, 3).toString();
            try {
                date = new SimpleDateFormat("dd-MM-yyyy").parse((String) model.getValueAt(i, 2));
            } catch (ParseException ex) {
                Logger.getLogger(RecpPanelAppointment.class.getName()).log(Level.SEVERE, null, ex);
            }

            model.removeRow(i);

            FileRead fr = new FileRead();
            List<Appointment> newList = new ArrayList<Appointment>();
            newList = fr.fileReadAppointment();
            SimpleDateFormat f = new SimpleDateFormat("dd-MM-yyyy");
            int ii = -1;
            for (Appointment a : newList) {
                ii++;
                if (pname.equalsIgnoreCase(a.getpName())
                        && dname.equalsIgnoreCase(a.getdName())
                        && f.format(date).equals(f.format(a.getAppDate()))
                        && time.equalsIgnoreCase(a.getTime())) {
                    break;
                }
            }
            newList.remove(ii);
            FileRemove fu = new FileRemove();
            fu.fileRemoveAppointment(newList);
            JOptionPane.showMessageDialog(null, "Appointment Removed");
        }
    }//GEN-LAST:event_cancel1ActionPerformed

    private void jFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFullNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFullNameActionPerformed

    private void jSearchButttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchButttonActionPerformed
        search = jFullName.getText();
        DefaultTableModel model = (DefaultTableModel) jComfirmed.getModel();
        model.setRowCount(0);
        List<Appointment> alistFinal = new ArrayList<Appointment>();
        FileRead fr = new FileRead();

        alistFinal = fr.fileReadAppointmentFinal();
        Object rowData[] = new Object[3];

        for (Appointment pp : alistFinal) {

            if (search.equalsIgnoreCase(pp.getdName())) {
                rowData[0] = pp.getpName();
                rowData[1] = pp.strDate();
                rowData[2] = pp.getTime();
                model.addRow(rowData);
            }

        }

    }//GEN-LAST:event_jSearchButttonActionPerformed

    private void cancel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel2ActionPerformed
        String pname;
        String dname;
        Date date = null;
        String time;

        int i = jComfirmed.getSelectedRow();

        if (i == -1) {
            JOptionPane.showMessageDialog(null, "Select a confirmed Appointment",
                    "ERROR", JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) jComfirmed.getModel();
            pname = model.getValueAt(i, 0).toString();
            dname = search;
            time = model.getValueAt(i, 2).toString();
            try {
                date = new SimpleDateFormat("dd-MM-yyyy").parse((String) model.getValueAt(i, 1));
            } catch (ParseException ex) {
                Logger.getLogger(RecpPanelAppointment.class.getName()).log(Level.SEVERE, null, ex);
            }

            model.removeRow(i);
            FileRead fr = new FileRead();
            List<Appointment> newList = new ArrayList<Appointment>();
            newList = fr.fileReadAppointmentFinal();
            SimpleDateFormat f = new SimpleDateFormat("dd-MM-yyyy");
            int ii = -1;
            for (Appointment a : newList) {
                ii++;
                if (pname.equalsIgnoreCase(a.getpName())
                        && dname.equalsIgnoreCase(a.getdName())
                        && f.format(date).equals(f.format(a.getAppDate()))
                        && time.equalsIgnoreCase(a.getTime())) {
                    break;
                }
            }
            newList.remove(ii);
            FileRemove fu = new FileRemove();
            fu.fileRemoveAppointmentFinal(newList);
            JOptionPane.showMessageDialog(null, "Appointment Removed");
        }
    }//GEN-LAST:event_cancel2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecpPanelAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecpPanelAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecpPanelAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecpPanelAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecpPanelAppointment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel add4;
    private javax.swing.JButton cancel1;
    private javax.swing.JButton cancel2;
    private javax.swing.JButton froward;
    private javax.swing.JTable jComfirmed;
    private com.toedter.calendar.JDateChooser jDate;
    private javax.swing.JTextField jFullName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jSearchButtton;
    private javax.swing.JComboBox<String> jTime;
    private javax.swing.JTable jappoint;
    private javax.swing.JTextField name;
    private javax.swing.JButton reschedule;
    private javax.swing.JLabel update3;
    private javax.swing.JLabel update4;
    private javax.swing.JLabel update5;
    private javax.swing.JLabel update6;
    private javax.swing.JLabel update7;
    private javax.swing.JLabel update8;
    // End of variables declaration//GEN-END:variables
}
